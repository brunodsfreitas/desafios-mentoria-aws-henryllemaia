
################################################################
/*
module "alb" {
  source  = "terraform-aws-modules/alb/aws"
  version = "~> 9.0"

  name = "${var.ecs_name}-alb"

  load_balancer_type = "application"

  vpc_id  = module.vpc.vpc_id
  subnets = module.vpc.public_subnets

  # For example only
  enable_deletion_protection = false

  # Security Group
  security_group_ingress_rules = {
    all_http = {
      from_port   = var.ecs_alb_port
      to_port     = var.ecs_alb_port
      ip_protocol = "tcp"
      cidr_ipv4   = "0.0.0.0/0"
    }
  }
  security_group_egress_rules = {
    all = {
      ip_protocol = "-1"
      cidr_ipv4   = module.vpc.vpc_cidr_block
    }
  }

  listeners = {
    bia_http = {
      port     = var.ecs_alb_port
      protocol = "HTTP"

      forward = {
        target_group_key = "bia"
      }
    }
  }

  target_groups = {
    bia = {
      backend_protocol                  = "HTTP"
      backend_port                      = var.ecs_container_port
      target_type                       = "instance"
      deregistration_delay              = 10
      load_balancing_cross_zone_enabled = true

      health_check = {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 10
        unhealthy_threshold = 2
      }

      # Theres nothing to attach here in this definition. Instead,
      # ECS will attach the IPs of the tasks to this target group
      create_attachment = false
    }
  }

  tags = var.desc_tags
}

# Criação do Cluster ECS
resource "aws_ecs_cluster" "ecs" {
  name = var.ecs_name
}

# Criação do Launch Configuration
resource "aws_launch_configuration" "example" {
  name          = "example-launch-config"
  image_id      = jsondecode(data.aws_ssm_parameter.ecs_optimized_ami.value)["image_id"]
  instance_type = "t3.micro"     # Tipo de instância desejado

  security_groups = [module.autoscaling_sg.security_group_id]
  key_name        = var.ecs_asg_key

  lifecycle {
    create_before_destroy = true
  }

  user_data = <<-EOF
            #!/bin/bash
            cat <<'EOF' >> /etc/ecs/ecs.config
            ECS_CLUSTER=${var.ecs_name}
            ECS_LOGLEVEL=debug
            ECS_CONTAINER_INSTANCE_TAGS=${jsonencode(var.desc_tags)}
            EOF
}

# Criação do Auto Scaling Group
resource "aws_autoscaling_group" "example" {
  name = "${var.ecs_name}-asg"
  launch_configuration = aws_launch_configuration.example.id
  min_size             = 1
  max_size             = 4
  desired_capacity     = 2
  vpc_zone_identifier  = ["subnet-12345678"] # Subnet ID desejada
}

# Criação da Política de Upscaling
resource "aws_autoscaling_policy" "upscaling_policy" {
  name                      = "upscaling-policy"
  scaling_adjustment        = 1 # Aumenta em 1 instância
  adjustment_type           = "ChangeInCapacity"
  cooldown                  = 300 # Tempo de espera em segundos antes de permitir outro escalonamento
  estimated_instance_warmup = 300 # Tempo de espera em segundos para as novas instâncias estarem prontas
  policy_type               = "TargetTrackingScaling"
  autoscaling_group_name    = aws_autoscaling_group.example.name

  target_tracking_configuration {
    target_value = 70
    predefined_metric_specification {
      predefined_metric_type = "ASGAverageCPUUtilization"

    }
  }
}

# Criação da Política de Downscaling
resource "aws_autoscaling_policy" "downscaling_policy" {
  name                      = "downscaling-policy"
  scaling_adjustment        = -1 # Reduz em 1 instância
  adjustment_type           = "ChangeInCapacity"
  cooldown                  = 300 # Tempo de espera em segundos antes de permitir outro escalonamento
  estimated_instance_warmup = 300 # Tempo de espera em segundos para as novas instâncias estarem prontas
  policy_type               = "TargetTrackingScaling"
  autoscaling_group_name    = aws_autoscaling_group.example.name

  target_tracking_configuration {
    target_value = 20
    predefined_metric_specification {
      predefined_metric_type = "ASGAverageCPUUtilization"
    }
  }
}

# Regra IAM para permissões ECS
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "${var.ecs_name}-role"
  description = "ECS role for ${var.ecs_name}"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

# Anexar política AmazonECSTaskExecutionRolePolicy à função
resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Definição de Tarefa (Task Definition)
resource "aws_ecs_task_definition" "example" {
  family = "example-task"
  container_definitions = jsonencode([
    {
      name  = "example-container"
      image = "nginx:latest"
      # Outras configurações do contêiner...
    }
  ])

  # Configuração de Placement Constraints para permitir apenas uma tarefa por host
  placement_constraints {
    type       = "memberOf"
    expression = "attribute:ecs.instance-type =~ t2.*"
  }
}

# Criação do Serviço ECS
resource "aws_ecs_service" "example" {
  name            = "example-service"
  cluster         = aws_ecs_cluster.example.id
  task_definition = aws_ecs_task_definition.example.arn
  desired_count   = 2

  # Configuração de estratégia de Placement para permitir apenas uma tarefa por host
  placement_constraints {
    type       = "memberOf"
    expression = "attribute:ecs.instance-type =~ t3.*"
  }
}
*/